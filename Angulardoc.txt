
    

    
    Routings
    http methods
    rx js
    forms
    
    Angular installation=
    =======================
    1) Node js installation
          check: npm -v
                 node -v

    2) Angular installation

        npm install -g @angular/cli@15

        check: ng version

    3) Create an angular application
         -open command promt
         -cd Desktop
         -ng new my-app

                 Routing-y
                 css

    4) Running angular application
               ng- serve
        check:     http://localhost:4200/


        **) Open power shell as admin
        **) 
          

          cost route: Routes = [
            {path:}
          ]

  
   data binding=
   ==============
               event binding------------()
               property binding-------------[]
               interpolletion--------------------{{}}
                two way dbinding-----------------------[(?)]




    Architechture=
    ==============
      => directives--->alter the data in dom--edit

            1) structural directives-->editing the structure of html 

                  -> *ngFor
                  -> *ngIf

            2)Attribute directives
                    -> *ngClass
                    -> *ngStyle

            3)custom  directives



       => pipes --->use to alter the data format (filters)

             | lower case 
             | upper case
             | date
             | date: 'yy-mm-dd'


        => 

    Rx  js=
    =======

    promise----single call back
    observable----multiple  call backs--unicost
    subject--------multiple  call backs--multicost



     Dataflow:

Form Creation:

HTML --> TS ---> Servive --> API

Dislaying data: Table

API  ---> Service ---> TS --- HTML   ( in the form of table using Interpolation{{}})



ALL Possible API calls=
========================

CURD operations


display all data          get              direct url
specific                  get              get(url/id)
filter                    ""               url?filter=key
pagination                ""               url?limit="+limit+"&page="+page;
sort                      ""               url?sortBy="+column+"&order="+order;

create                    post             (url,data);
update                    put              url/"+id;
delete                    delete           url/"+id;

Forms=
========

        --->Reactive forms

        --->Template driven forms (html) using ->[(ngModel)]
   



Reactive forms=
================

       1)FormGroup------- diff  FormControls----like inputs
       2)Nested FormGroup----form inside form -- Ref to create-user comp 
       3) Dynamic forms --- either or conditions we use
       4)Form Array--- Dynamically Add directly or delete directly in array - Ref to create-user comp 
       5)Validations- 1) predefined 2) custom 3)Async validators
       6)custom validators - to validate custom data

validators:

Form Validations
=ニニニニニニニニニニニニ===
TS:
name:new FormControl('', [Validators.required, Validators.maxLength(10)]);  --- ref createuser comp
HTML:
=ニニ==
(div *ngIf="userForm. get('email')?.invalid && userForm.get('email')?.touched">
<p *ngIf="CONTROLS? .errors?.['required']">Error Message</p>
<p *ngIf="CONTROLS?.errors?.['maxlength']">Error Message</p>
</div>
CONTROLS:
=========
1)FormGroup
2)1Nested FormGroup
3) FormArray
userForm.get('name')
userForm.get('address')?.get('pincode')
cardsFormArray.Controls[i]?.get('cvv')



Login functionality : 

check the myapp project login componet for the code.

token: JWT - give expiry for token for login (backend)


Gaurds or Route Gaurds:
========================
1) can activate
2) can deactivate
3)child can activate

Angular life cycle Hooks=    video class
=========================

  * used to detect the changes


       ngOnChanges-changes in input value- used in parent Child communication
       ngOnInIt     -Initialization of value
       ngDoCheck     -changes in component
       ngContent In It
       ngContent Check It
       ngView Unit
       ngView Check
       ng Distroy   -cleanup existing Resources when coming out from component



      ==>Initialization
      ==>Close Detection
      ==>Resource cleanup
      ==>Custom logics


      **class missed.check the content on yt.




Angular material=
==================

Booot strap-----------css framework-classses

Angular material----------ui library-component

material=
         mat buttton module--buttton


import in app module.ts*



ck editor

material icons


Communication:
==============

to share data b/w parents =>siblings -- siblings 1 and siblings 2
                  child to parent -- parent and child comp
                   child to child  

created 2 siblings in the pr1 


  **=> module Communication --pending
  =>  page  Communication     


  customs:
  =======

custom directives ---ng g d name---- ref capital directive --- used in create-user component : <input type="text" formControlName="name" appCapital> <br>
  custom pipes  ---- ng g p name ----ref balance--used in vehicle component :  <td>{{vehicle.cost  | balance }}</td>
   custom data types/modals --ng g i user--- (i:interface)- used in vehicle.ts- user:User={ name:'' ,age:0 }

custom validators:
===========================================================================================================

create a file : validators.ts -> write function -> used in create-user email in Ts
email: new FormControl('',[Validators.required,Validators.email,tcsMail]),

to show error : write in html

<p *ngIf="userForm.get('email')?.errors?.['tcsMail']">Give Tcs email</p>

===========================================================================================================
 custom api:
 =============
 create a json file in assests named as data.json , -> insert data in json file and call it in the service 

 ex:  vehicle service
 baseUrl:string="/assets/data.json"  - Ref vehicle service

 it is called dummy Json .
 =======================================================================================================
     interceptors:
it regarding api is public or private , if public it can be breached , so we use private but it can be used with token -> ng g interceptor 
name(token). we can write in interceptor.ts and in app.module.ts -> 
     providers: [
     { provide:HTTP_INTERCEPTORS,
      useClass:TokenInterceptor,
      multi:true}
  ]
  ============================================================================================================
     custom commands : 

to run multiple commands

  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "begin":"ng serve"
  },

  in terminal : npm run begin      

 ========================================================== 

Module:

create: ng g m name(about)  -> to take comp in about take terminal on about and generate components , link module to the app.module.ts  , the loading is called as eager loading(all components laod at the time of login),
link to app.module.ts -- module run at time of starting module called eager loading.

Lazy loading : 

when only needed , we give module to run. ex: payment module

ng g m --routing --- to create routing to module







          
                 
  
  
  
  
  
  
  
  
  
  
  
  
  Git
  ===

     create account in GIT=

             git config --global user.name "sai-reddy4"
             git config --global user.email "saikoo1104@gmail.com"

      check=

           git config --list


        Link=

               Project <-> repository

              git init
              git remote add origin --url--

              check:git remote -v

        Process=
        ========

        git add ->single file
        git add . ->all files

        git commit -m "XXXX"

        git push

        pull request -> approve-> merge


        create branch
        git branch
        git fetch
        git checkout dashboard




    


    
    
    
    
    
    
    
    
    
    
    
    
